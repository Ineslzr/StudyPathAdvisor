# -*- coding: utf-8 -*-
"""analyseDataSet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zEX5bBzS7AJtv9tDMF8qky_R9ZEfDBbH

Importer le data set ( c'est un fichier json )
"""

import matplotlib.pyplot as plt
from wordcloud import WordCloud
from collections import Counter
import pandas as pd
import json

!pip install prince

import prince

# Load the data
file_path = '/content/sample_data/student_profiles.jsonl'
data = []
with open(file_path, 'r') as file:
    for line in file:
        data.append(json.loads(line))
df = pd.DataFrame(data)
df.head()

print(df.columns)

# Statistiques descriptives pour les colonnes numériques
print(df[['Age', 'GPA']].describe())

# Compter le nombre de chaque sexe
sex_count = df['Sex'].value_counts()
print(sex_count)

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Supposons que 'df' est votre DataFrame Pandas

# Comptez le nombre d'étudiants par 'Major' et 'Sex'
student_count_by_major_and_sex = df.groupby(['Major', 'Sex']).size().reset_index(name='Count')

# Utilisez Seaborn pour créer un graphique à barres groupées
plt.figure(figsize=(15, 10))  # Vous pouvez ajuster la taille pour mieux voir les étiquettes des axes
chart = sns.barplot(x='Major', y='Count', hue='Sex', data=student_count_by_major_and_sex)

# Améliorez la lisibilité en inclinant les étiquettes de l'axe x
chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')

# Ajouter des titres et des étiquettes
plt.title('Nombre d\'étudiants par Genre et par Formation')
plt.xlabel('Formation (Major)')
plt.ylabel('Nombre d\'étudiants')
plt.legend(title='Sex')

# Afficher le graphique
plt.tight_layout()  # Ajuste le layout pour tenir compte des étiquettes
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Supposons que 'df' est votre DataFrame Pandas

# Comptez le nombre d'étudiants par 'Major' et 'Sex'
student_count_by_major_and_sex = df.groupby(['Major', 'Sex']).size().reset_index(name='Count')

# Diviser les données en sous-groupes de 10 formations
majors = student_count_by_major_and_sex['Major'].unique()
nb_majors = len(majors)
nb_groupes = nb_majors // 10 + (nb_majors % 10 > 0)  # Calculer le nombre de groupes (arrondi supérieur)

# Afficher les résultats par 10 formations
for i in range(nb_groupes):
    start_index = i * 10
    end_index = min((i + 1) * 10, nb_majors)
    majors_subset = majors[start_index:end_index]

    # Filtrer les données pour inclure seulement les formations dans le sous-groupe
    subset_data = student_count_by_major_and_sex[student_count_by_major_and_sex['Major'].isin(majors_subset)]

    # Utiliser Seaborn pour créer un graphique à barres groupées
    plt.figure(figsize=(15, 10))
    chart = sns.barplot(x='Major', y='Count', hue='Sex', data=subset_data)

    # Améliorer la lisibilité en inclinant les étiquettes de l'axe x
    chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')

    # Ajouter des titres et des étiquettes
    plt.title(f'Nombre d\'étudiants par Genre et par Formation (Formations {start_index + 1}-{end_index})')
    plt.xlabel('Formation (Major)')
    plt.ylabel('Nombre d\'étudiants')
    plt.legend(title='Sexe')

    # Afficher le graphique
    plt.tight_layout()
    plt.show()

import pandas as pd

# Supposons que 'df' est votre DataFrame Pandas
# Code pour créer 'df' ...

# Comptez le nombre d'étudiants par 'Major' et 'Sex'
student_count_by_major_and_sex = df.groupby(['Major', 'Sex']).size().reset_index(name='Count')

# Convertir le résultat en JSON
json_result = student_count_by_major_and_sex.to_json(orient='records')

# Afficher le résultat JSON
print(json_result)

import pandas as pd

# Load the data
file_path = '/content/sample_data/student_profiles.jsonl'
data = []
with open(file_path, 'r') as file:
    for line in file:
        data.append(json.loads(line))
df = pd.DataFrame(data)
student_count_by_major_and_sex = df.groupby(['Major', 'Sex']).size().reset_index(name='Count')

# Créer un dictionnaire pour stocker les résultats regroupés par Major
major_data = {}

# Boucler à travers les résultats et regrouper par Major
for index, row in student_count_by_major_and_sex.iterrows():
    major = row['Major']
    sex = row['Sex']
    count = row['Count']

    # Vérifier si la formation (Major) est déjà dans le dictionnaire
    if major not in major_data:
        major_data[major] = {}

    # Vérifier si le sexe est déjà dans le dictionnaire pour cette formation
    if sex in major_data[major]:
        # Ajouter le nombre d'étudiants au décompte existant
        major_data[major][sex] += count
    else:
        # Créer une nouvelle entrée pour le sexe
        major_data[major][sex] = count

# Convertir le dictionnaire en une liste de dictionnaires
result = [{'Major': major, **counts} for major, counts in major_data.items()]

# Afficher le résultat au format JSON
import json
print(json.dumps(result))

import json
import pandas as pd

# Load the data
file_path = '/content/sample_data/student_profiles.jsonl'
data = []
with open(file_path, 'r') as file:
    for line in file:
        data.append(json.loads(line))
df = pd.DataFrame(data)
student_count_by_major_and_sex = df.groupby(['Major', 'Sex']).size().reset_index(name='Count')

# Créer un dictionnaire pour stocker les résultats regroupés par Major
major_data = {}

# Boucler à travers les résultats et regrouper par Major
for index, row in student_count_by_major_and_sex.iterrows():
    major = row['Major']
    sex = row['Sex']
    count = row['Count']

    # Vérifier si la formation (Major) est déjà dans le dictionnaire
    if major not in major_data:
        major_data[major] = {}

    # Vérifier si le sexe est déjà dans le dictionnaire pour cette formation
    if sex in major_data[major]:
        # Ajouter le nombre d'étudiants au décompte existant
        major_data[major][sex] += count
    else:
        # Créer une nouvelle entrée pour le sexe
        major_data[major][sex] = count

# Convertir le dictionnaire en une liste de dictionnaires
result = [{'Major': major, **counts} for major, counts in major_data.items()]

# Nom du fichier de sortie JSON
output_file_path = '/content/sample_data/student_profiles_grouped.json'

# Écrire le résultat dans un fichier JSON
with open(output_file_path, 'w') as output_file:
    json.dump(result, output_file)

print(f"Fichier JSON téléchargé avec succès : {output_file_path}")

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import json

# Supposons que 'df' est votre DataFrame Pandas
# Code pour créer 'df' ...

# Comptez le nombre d'étudiants par 'Major' et 'Sex'
student_count_by_major_and_sex = df.groupby(['Major', 'Sex']).size().reset_index(name='Count')

# Utilisez Seaborn pour créer un graphique à barres groupées
plt.figure(figsize=(15, 10))  # Vous pouvez ajuster la taille pour mieux voir les étiquettes des axes
chart = sns.barplot(x='Major', y='Count', hue='Sex', data=student_count_by_major_and_sex)

# Améliorez la lisibilité en inclinant les étiquettes de l'axe x
chart.set_xticklabels(chart.get_xticklabels(), rotation=45, horizontalalignment='right')

# Ajouter des titres et des étiquettes
plt.title('Nombre d\'étudiants par Genre et par Formation')
plt.xlabel('Formation (Major)')
plt.ylabel('Nombre d\'étudiants')
plt.legend(title='Sex')

# Afficher le graphique
plt.tight_layout()  # Ajuste le layout pour tenir compte des étiquettes
# plt.show()  # Commentez cette ligne si vous ne voulez pas afficher le graphique

# Convertir le DataFrame en un dictionnaire JSON
json_data = student_count_by_major_and_sex.to_dict(orient='records')

# Envoyer le JSON
print(json_data)

unique_majors = df['State/Province'].drop_duplicates().tolist()

# Afficher la liste des formations uniques
print(unique_majors)


nombre_formations_uniques = df['State/Province'].nunique()

# Afficher le nombre de formations uniques
print("Nombre de State/Province :", nombre_formations_uniques)

# Comptez le nombre d'étudiants par État
student_count_by_state = df['State/Province'].value_counts().reset_index()
student_count_by_state.columns = ['State/Province', 'Number of Students']

# Triez les états par nombre d'étudiants décroissant
student_count_by_state = student_count_by_state.sort_values(by='Number of Students', ascending=False)

# Créez un graphique en barres
plt.figure(figsize=(15, 8))  # Taille du graphique, peut être ajustée pour une meilleure lisibilité
plt.bar(student_count_by_state['State/Province'], student_count_by_state['Number of Students'], color='skyblue')

# Ajoutez des étiquettes pour une meilleure lisibilité
plt.xticks(rotation=90)  # Faites pivoter les étiquettes des états pour qu'elles soient lisibles
plt.xlabel('State/Province')
plt.ylabel('Number of Students')
plt.title('Number of Students by State/Province')

# Montrez le graphique
plt.tight_layout()
plt.show()

json_result = student_count_by_state.to_json(orient='records')

# Affichez le résultat JSON
print(json_result)

result = student_count_by_state.to_dict(orient='records')

# Nom du fichier de sortie JSON
output_file_path = '/mnt/data/student_profiles_grouped.json'

# Écrire le résultat dans un fichier JSON
with open(output_file_path, 'w') as output_file:
    json.dump(result, output_file)

print(f"Fichier JSON sauvegardé avec succès : {output_file_path}")